services:
  db:
    platform: linux/amd64
    build:
      context: ..
      dockerfile_inline: |
        FROM mysql:8.0-debian

        RUN apt update && apt install -y curl

        # Install https://github.com/golang-migrate/migrate
        RUN curl -s https://packagecloud.io/install/repositories/golang-migrate/migrate/script.deb.sh | bash \
          && apt install -y migrate

        # Install https://github.com/k0kubun/sqldef/tree/v0.16.9
        RUN curl -OL https://github.com/k0kubun/sqldef/releases/download/v0.16.9/mysqldef_linux_amd64.tar.gz \
          && tar xf mysqldef_linux_amd64.tar.gz -C /usr/bin/
    container_name: db
    profiles: ["db"]
    healthcheck:
      test: "mysqladmin ping"
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      MYSQL_USER: docker
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: docker
      MYSQL_DATABASE: local
      TZ: 'Asia/Tokyo'
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ../db/.data:/var/lib/mysql
      - ../db/my.cnf:/etc/mysql/conf.d/my.cnf
      - ../db/setup:/docker-entrypoint-initdb.d
      - ../db/migrations:/migrations
      - ../scripts/docker:/scripts
      - ../db/schema.sql:/schema.sql
      - ../db/.dump_data/:/dump_data
    ports:
      - "127.0.0.1:3306:3306"
  # いまのところ使う予定はないのでコメントアウト
  # gcs:
  #   image: fsouza/fake-gcs-server
  #   tty: true
  #   stdin_open: true
  #   privileged: true
  #   profiles: ["db"]
  #   security_opt:
  #     - seccomp:unconfined
  #   ports:
  #     - 4443:4443
  #   volumes:
  #     - ../.data:/data/oreore-me:cached
  #     - ../.data:/data/test-oreore-me:cached
  #     - ../.storage:/storage
  #   command: -scheme http -public-host localhost:4443
  backend_app:
    container_name: backend_app
    build:
      context: ..
      dockerfile_inline: |
        FROM golang:1.22.0-alpine

        RUN apk update && apk add --no-cache ca-certificates tar curl && update-ca-certificates
        RUN go install github.com/cosmtrek/air@v1.49.0

        WORKDIR /app

        COPY go.mod go.sum ./
        RUN go mod download
    ports:
      - "8080:8080"
    volumes:
      - ..:/app
    # 一旦ヘルスチェックは行わない
    # healthcheck:
    #   test: "curl --fail http://localhost:8080 || exit 1"
    #   interval: 5s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s
    profiles: ["app"]
    depends_on:
      db:
        condition: service_healthy
      gcs:
        condition: service_started
    command: air -c .air.toml
  # frontend:
  #   container_name: frontend_app
  #   build:
  #     context: ..
  #     dockerfile_inline: |
  #       FROM node:18-alpine

  #       RUN apk update && apk add --no-cache curl
  #       RUN npm i -g pnpm

  #       WORKDIR /app
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - NEXT_PUBLIC_PUBLICATION_TYPE=local
  #   volumes:
  #     - oreore-next-cache:/app/.next
  #     - oreore-node-modules:/app/node_modules
  #     - oreore-pnpm-store:/app/.pnpm-store
  #     - ..:/app
  #   healthcheck:
  #     test: "curl --fail -I http://localhost:3000 || exit 1"
  #     interval: 60s
  #     timeout: 30s
  #     retries: 10
  #     start_period: 60s
  #   profiles: ["app"]
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     gcs:
  #       condition: service_started
  #   command: sh -c "pnpm i --frozen-lockfile && pnpm dev"
  nginx:
    container_name: nginx_app
    image: nginx
    ports:
      - "3000:3000"
      - "3002:3002"
    volumes:
      - ../scripts/nginx/nginx.conf:/etc/nginx/nginx.conf
    environment:
      - CHOKIDAR_USEPOLLING=true
    # depends_on:
    #   frontend:
    #     condition: service_healthy
    #   backend:
    #     condition: service_healthy
    #   gcs:
    #     condition: service_started
# volumes:
#   oreore-next-cache:
#   oreore-node-modules:
#   oreore-pnpm-store:
